# initilise dataframe
all_BLAST <- data_frame()
# initilise dataframe
all_BLAST <- data_frame()
# loop over all genomes
for (genome in genomes) {
# Load BLAST data
BLASTN_raw <- read_tsv(str_c("TPP_aptamer_search/BLAST_results/BLASTN_queries_P2-P4_vs_",genome,".out"), col_names = c("QueryId","SubjectId", "Identity(%)", "Length", "Mismatches", "Gap_opens", "Q_Start", "Q_End", "S_Start", "S_End", "Evalue", "BitScore"))%>%
mutate(Genome = genome) %>%
mutate(Strand = "+") %>%
mutate(Var = 0)
# convert format to .bed standard and filter for hits with Evalue < 10^-10
BLASTN <- BLASTN_raw %>%
mutate(SubjectId = str_replace(SubjectId, pattern = "\\.", "_")) %>%
filter(Evalue < 10^-3)
all_BLAST <- rbind(all_BLAST, BLASTN)
#mutate(Strand = ifelse(S_End < S_Start,"-","+")) %>%
#mutate(Var = ifelse(Strand == "-",S_Start,0)) %>%
#mutate(S_Start = ifelse(Strand == "-",S_End,S_Start)) %>%
#mutate(S_End = ifelse(Strand == "-",Var,S_End)) %>%
#mutate(S_Start = S_Start-1) #%>%
#select(SubjectId, S_Start, S_End, Name, Evalue, Strand) %>%
#arrange(SubjectId, S_Start)
## save data in .bed file format
#write_tsv(BLASTN, file.path(str_c(outfolder,"GullivR/",genome,"_",search,".bed")), col_names = FALSE)
#write_tsv(filter(BLASTN, Evalue < 10^-10), file.path(str_c(outfolder,"GullivR/",genome,"_",search,"_selected.bed")), col_names = FALSE)
}
View(all_BLAST)
View(all_BLAST)
table(all_BLAST$Genome)
# Load gene annotation data
genes_raw <- read_tsv(str_c("TPP_aptamer_search/genomes/",genome,"/*.gff3"))
# Load gene annotation data
list.files(str_c("TPP_aptamer_search/genomes/",genome)
genes_raw <- read_tsv(str_c("TPP_aptamer_search/genomes/",genome,"/*.gff3"))
list.files(str_c("TPP_aptamer_search/genomes/",genome))
list.files(str_c("TPP_aptamer_search/genomes/",genome,"/"))
genome
# Load gene annotation data
list.files(str_c("TPP_aptamer_search/genomes/",genome,"/"), all.files = TRUE)
# Load gene annotation data
files <- list.files(str_c("TPP_aptamer_search/genomes/",genome,"/"), all.files = TRUE)
str_subset(files, "\.gff3")
# Load gene annotation data
files <- list.files(str_c("TPP_aptamer_search/genomes/",genome,"/"), all.files = TRUE)
str_subset(files, "\.gff3")
str_subset(files, "\\.gff3")
genes_raw <- read_tsv(file)
genes_raw <- read_tsv(str_c("TPP_aptamer_search/genomes/",genome,"/",file))
# Load gene annotation data
files <- list.files(str_c("TPP_aptamer_search/genomes/",genome,"/"), all.files = TRUE)
file <- str_subset(files, "\\.gff3")
genes_raw <- read_tsv(str_c("TPP_aptamer_search/genomes/",genome,"/",file))
View(genes_raw)
genes_raw <- read_tsv(str_c("TPP_aptamer_search/genomes/",genome,"/",file), col_names = c("seqid", "source", "type", "start", "end", "score", "strand", "phase", "attributes"))
genes <- read_tsv(str_c("TPP_aptamer_search/genomes/",genome,"/",file), col_names = c("seqid", "source", "type", "start", "end", "score", "strand", "phase", "attributes")) %>%
filter(type == "gene")
View(genes)
# loop over all blast results
for i in 1:nrow(BLASTN_raw){
# loop over all blast results
for (i in 1:nrow(BLASTN_raw)){
# loop over all annotated genes
for (j in 1:nrow(genes)){
# if seqid matches
if (BLASTN_raw$SubjectId[i] == genes$seqid[j]){
# if hit is overlapping with gene region
if (BLASTN_raw$QCenter[i] >= genes$start[j] & BLASTN_raw$QCenter[i] <= genes$end[j]){
BLASTN$Gene[i] <- gene$attributes[j]
}
}
}
}
# Load BLAST data
BLASTN_raw <- read_tsv(str_c("TPP_aptamer_search/BLAST_results/BLASTN_queries_P2-P4_vs_",genome,".out"), col_names = c("QueryId","SubjectId", "Identity(%)", "Length", "Mismatches", "Gap_opens", "Q_Start", "Q_End", "S_Start", "S_End", "Evalue", "BitScore"))%>%
mutate(Genome = genome) %>%
mutate(Strand = "+") %>%
mutate(Var = 0) %>%
mutate(QCenter =  QStart+(Q_End-QStart)/2) %>%
filter(Evalue < 10^-3)
# Load BLAST data
BLASTN_raw <- read_tsv(str_c("TPP_aptamer_search/BLAST_results/BLASTN_queries_P2-P4_vs_",genome,".out"), col_names = c("QueryId","SubjectId", "Identity(%)", "Length", "Mismatches", "Gap_opens", "Q_Start", "Q_End", "S_Start", "S_End", "Evalue", "BitScore"))%>%
mutate(Genome = genome) %>%
mutate(Strand = "+") %>%
mutate(Var = 0) %>%
mutate(QCenter =  QStart+(Q_End-QStart)/2) %>%
filter(Evalue < 10^-3)
# Load BLAST data
BLASTN_raw <- read_tsv(str_c("TPP_aptamer_search/BLAST_results/BLASTN_queries_P2-P4_vs_",genome,".out"), col_names = c("QueryId","SubjectId", "Identity(%)", "Length", "Mismatches", "Gap_opens", "Q_Start", "Q_End", "S_Start", "S_End", "Evalue", "BitScore"))%>%
mutate(Genome = genome) %>%
mutate(Strand = "+") %>%
mutate(Var = 0) %>%
mutate(QCenter =  QStart+((Q_End-QStart)/2)) %>%
filter(Evalue < 10^-3)
# Load BLAST data
BLASTN_raw <- read_tsv(str_c("TPP_aptamer_search/BLAST_results/BLASTN_queries_P2-P4_vs_",genome,".out"), col_names = c("QueryId","SubjectId", "Identity(%)", "Length", "Mismatches", "Gap_opens", "Q_Start", "Q_End", "S_Start", "S_End", "Evalue", "BitScore"))%>%
mutate(Genome = genome) %>%
mutate(Strand = "+") %>%
mutate(Var = 0) %>%
mutate(Q_Center =  Q_Start+((Q_End-Q_Start)/2)) %>%
filter(Evalue < 10^-3)
# Load gene annotation data
files <- list.files(str_c("TPP_aptamer_search/genomes/",genome,"/"), all.files = TRUE)
file <- str_subset(files, "\\.gff3")
genes <- read_tsv(str_c("TPP_aptamer_search/genomes/",genome,"/",file), col_names = c("seqid", "source", "type", "start", "end", "score", "strand", "phase", "attributes")) %>%
filter(type == "gene") %>%
mutate(seqid = str_replace(seqid, pattern = "\\.", "_"))
BLASTN <- BLASTN_raw
# loop over all blast results
for (i in 1:nrow(BLASTN_raw)){
# loop over all annotated genes
for (j in 1:nrow(genes)){
# if seqid matches
if (BLASTN_raw$SubjectId[i] == genes$seqid[j]){
# if hit is overlapping with gene region
if (BLASTN_raw$QCenter[i] >= genes$start[j] & BLASTN_raw$QCenter[i] <= genes$end[j]){
BLASTN$Gene[i] <- gene$attributes[j]
}
}
}
}
# loop over all blast results
for (i in 1:nrow(BLASTN_raw)){
# loop over all annotated genes
for (j in 1:nrow(genes)){
# if seqid matches
if (BLASTN_raw$SubjectId[i] == genes$seqid[j]){
# if hit is overlapping with gene region
if (BLASTN_raw$Q_Center[i] >= genes$start[j] & BLASTN_raw$QCenter[i] <= genes$end[j]){
BLASTN$Gene[i] <- gene$attributes[j]
}
}
}
}
# loop over all blast results
for (i in 1:nrow(BLASTN_raw)){
# loop over all annotated genes
for (j in 1:nrow(genes)){
# if seqid matches
if (BLASTN_raw$SubjectId[i] == genes$seqid[j]){
# if hit is overlapping with gene region
if (BLASTN_raw$Q_Center[i] >= genes$start[j] & BLASTN_raw$Q_Center[i] <= genes$end[j]){
BLASTN$Gene[i] <- gene$attributes[j]
}
}
}
}
# Load BLAST data
BLASTN_raw <- read_tsv(str_c("TPP_aptamer_search/BLAST_results/BLASTN_queries_P2-P4_vs_",genome,".out"), col_names = c("QueryId","SubjectId", "Identity(%)", "Length", "Mismatches", "Gap_opens", "Q_Start", "Q_End", "S_Start", "S_End", "Evalue", "BitScore"))%>%
mutate(Genome = genome) %>%
mutate(Strand = "+") %>%
mutate(Var = 0) %>%
mutate(Q_Center =  Q_Start+((Q_End-Q_Start)/2)) %>%
filter(Evalue < 10^-3)
# Load gene annotation data
files <- list.files(str_c("TPP_aptamer_search/genomes/",genome,"/"), all.files = TRUE)
file <- str_subset(files, "\\.gff3")
genes <- read_tsv(str_c("TPP_aptamer_search/genomes/",genome,"/",file), col_names = c("seqid", "source", "type", "start", "end", "score", "strand", "phase", "attributes")) %>%
filter(type == "gene") %>%
mutate(seqid = str_replace(seqid, pattern = "\\.", "_"))
BLASTN <- BLASTN_raw
# loop over all blast results
for (i in 1:nrow(BLASTN_raw)){
# loop over all annotated genes
for (j in 1:nrow(genes)){
# if seqid matches
if (BLASTN_raw$SubjectId[i] == genes$seqid[j]){
# if hit is overlapping with gene region
if (BLASTN_raw$Q_Center[i] >= genes$start[j] & BLASTN_raw$Q_Center[i] <= genes$end[j]){
BLASTN$Gene[i] <- gene$attributes[j]
}
}
}
}
# Load BLAST data
BLASTN_raw <- read_tsv(str_c("TPP_aptamer_search/BLAST_results/BLASTN_queries_P2-P4_vs_",genome,".out"), col_names = c("QueryId","SubjectId", "Identity(%)", "Length", "Mismatches", "Gap_opens", "Q_Start", "Q_End", "S_Start", "S_End", "Evalue", "BitScore"))%>%
mutate(Genome = genome) %>%
mutate(Strand = "+") %>%
mutate(Var = 0) %>%
mutate(Q_Center =  (Q_Start+(Q_End-Q_Start)/2)) %>%
filter(Evalue < 10^-3)
# Load BLAST data
BLASTN_raw <- read_tsv(str_c("TPP_aptamer_search/BLAST_results/BLASTN_queries_P2-P4_vs_",genome,".out"), col_names = c("QueryId","SubjectId", "Identity(%)", "Length", "Mismatches", "Gap_opens", "Q_Start", "Q_End", "S_Start", "S_End", "Evalue", "BitScore"))%>%
mutate(Genome = genome) %>%
mutate(Strand = "+") %>%
mutate(Var = 0) %>%
mutate(Q_Length =  Q_End-Q_Start)) %>%
# Load BLAST data
BLASTN_raw <- read_tsv(str_c("TPP_aptamer_search/BLAST_results/BLASTN_queries_P2-P4_vs_",genome,".out"), col_names = c("QueryId","SubjectId", "Identity(%)", "Length", "Mismatches", "Gap_opens", "Q_Start", "Q_End", "S_Start", "S_End", "Evalue", "BitScore"))%>%
mutate(Genome = genome) %>%
mutate(Strand = "+") %>%
mutate(Var = 0) %>%
mutate(Q_Length =  Q_End-Q_Start) %>%
filter(Evalue < 10^-3)
View(BLASTN)
BLASTN <- BLASTN_raw
# Load BLAST data
BLASTN <- read_tsv(str_c("TPP_aptamer_search/BLAST_results/BLASTN_queries_P2-P4_vs_",genome,".out"), col_names = c("QueryId","SubjectId", "Identity(%)", "Length", "Mismatches", "Gap_opens", "Q_Start", "Q_End", "S_Start", "S_End", "Evalue", "BitScore"))%>%
mutate(Genome = genome) %>%
mutate(Strand = "+") %>%
mutate(Var = 0) %>%
mutate(Q_Length =  Q_End-Q_Start) %>%
filter(Evalue < 10^-3)
# Load BLAST data
BLASTN <- read_tsv(str_c("TPP_aptamer_search/BLAST_results/BLASTN_queries_P2-P4_vs_",genome,".out"), col_names = c("QueryId","SubjectId", "Identity(%)", "Length", "Mismatches", "Gap_opens", "Q_Start", "Q_End", "S_Start", "S_End", "Evalue", "BitScore"))%>%
mutate(Genome = genome) %>%
mutate(Strand = "+") %>%
mutate(Var = 0) %>%
mutate(Q_Center =  Q_Star+(Q_End-Q_Start)/2) %>%
filter(Evalue < 10^-3)
# Load BLAST data
BLASTN <- read_tsv(str_c("TPP_aptamer_search/BLAST_results/BLASTN_queries_P2-P4_vs_",genome,".out"), col_names = c("QueryId","SubjectId", "Identity(%)", "Length", "Mismatches", "Gap_opens", "Q_Start", "Q_End", "S_Start", "S_End", "Evalue", "BitScore"))%>%
mutate(Genome = genome) %>%
mutate(Strand = "+") %>%
mutate(Var = 0) %>%
mutate(Q_Center =  Q_Star+(Q_End-Q_Start)/2) %>%
filter(Evalue < 10^-3)
# Load BLAST data
BLASTN <- read_tsv(str_c("TPP_aptamer_search/BLAST_results/BLASTN_queries_P2-P4_vs_",genome,".out"), col_names = c("QueryId","SubjectId", "Identity(%)", "Length", "Mismatches", "Gap_opens", "Q_Start", "Q_End", "S_Start", "S_End", "Evalue", "BitScore"))%>%
mutate(Genome = genome) %>%
mutate(Strand = "+") %>%
mutate(Var = 0) %>%
mutate(Q_Center =  Q_Star+(Q_End-Q_Start)/2) %>%
filter(Evalue < 10^-3)
# Load BLAST data
BLASTN <- read_tsv(str_c("TPP_aptamer_search/BLAST_results/BLASTN_queries_P2-P4_vs_",genome,".out"), col_names = c("QueryId","SubjectId", "Identity(%)", "Length", "Mismatches", "Gap_opens", "Q_Start", "Q_End", "S_Start", "S_End", "Evalue", "BitScore"))%>%
mutate(Genome = genome) %>%
mutate(Strand = "+") %>%
mutate(Var = 0) %>%
mutate(Q_Center =  Q_Start+(Q_End-Q_Start)/2) %>%
filter(Evalue < 10^-3)
# Load BLAST data
BLASTN <- read_tsv(str_c("TPP_aptamer_search/BLAST_results/BLASTN_queries_P2-P4_vs_",genome,".out"), col_names = c("QueryId","SubjectId", "Identity(%)", "Length", "Mismatches", "Gap_opens", "Q_Start", "Q_End", "S_Start", "S_End", "Evalue", "BitScore"))%>%
mutate(Genome = genome) %>%
mutate(Strand = "+") %>%
mutate(Var = 0) %>%
mutate(Q_Center =  Q_Start+(Q_End-Q_Start)/2) %>%
filter(Evalue < 10^-3)
# Load BLAST data
BLASTN <- read_tsv(str_c("TPP_aptamer_search/BLAST_results/BLASTN_queries_P2-P4_vs_",genome,".out"), col_names = c("QueryId","SubjectId", "Identity(%)", "Length", "Mismatches", "Gap_opens", "Q_Start", "Q_End", "S_Start", "S_End", "Evalue", "BitScore"))%>%
mutate(Genome = genome) %>%
mutate(Strand = "+") %>%
mutate(Var = 0) %>%
mutate(Q_Center =  Q_Start+(Q_End-Q_Start)/2) %>%
filter(Evalue < 10^-3)
View(BLASTN)
# Load BLAST data
BLASTN <- read_tsv(str_c("TPP_aptamer_search/BLAST_results/BLASTN_queries_P2-P4_vs_",genome,".out"), col_names = c("QueryId","SubjectId", "Identity(%)", "Length", "Mismatches", "Gap_opens", "Q_Start", "Q_End", "S_Start", "S_End", "Evalue", "BitScore"))%>%
mutate(Genome = genome) %>%
mutate(Strand = "+") %>%
mutate(Var = 0) %>%
mutate(Q_Length =  Q_End-Q_Start) %>%
filter(Evalue < 10^-3)
# Load BLAST data
BLASTN <- read_tsv(str_c("TPP_aptamer_search/BLAST_results/BLASTN_queries_P2-P4_vs_",genome,".out"), col_names = c("QueryId","SubjectId", "Identity(%)", "Length", "Mismatches", "Gap_opens", "Q_Start", "Q_End", "S_Start", "S_End", "Evalue", "BitScore"))%>%
mutate(Genome = genome) %>%
mutate(Strand = "+") %>%
mutate(Var = 0) %>%
mutate(Q_Length =  Q_End-Q_Start) %>%
mutate(Q_Center = Q_Start+(Q_Length/2)) %>%
filter(Evalue < 10^-3)
# Load BLAST data
BLASTN <- read_tsv(str_c("TPP_aptamer_search/BLAST_results/BLASTN_queries_P2-P4_vs_",genome,".out"), col_names = c("QueryId","SubjectId", "Identity(%)", "Length", "Mismatches", "Gap_opens", "Q_Start", "Q_End", "S_Start", "S_End", "Evalue", "BitScore"))%>%
mutate(Genome = genome) %>%
mutate(Strand = "+") %>%
mutate(Var = 0) %>%
mutate(Q_Length =  (Q_End-Q_Start)/2) %>%
mutate(Q_Center = Q_Start+Q_Length) %>%
filter(Evalue < 10^-3)
# Load BLAST data
BLASTN <- read_tsv(str_c("TPP_aptamer_search/BLAST_results/BLASTN_queries_P2-P4_vs_",genome,".out"), col_names = c("QueryId","SubjectId", "Identity(%)", "Length", "Mismatches", "Gap_opens", "Q_Start", "Q_End", "S_Start", "S_End", "Evalue", "BitScore"))%>%
mutate(Genome = genome) %>%
mutate(Strand = "+") %>%
mutate(Var = 0) %>%
mutate(Q_Length =  Q_End-Q_Start) %>%
mutate(Q_Center = Q_Start+Q_Length) %>%
filter(Evalue < 10^-3)
# Load BLAST data
BLASTN <- read_tsv(str_c("TPP_aptamer_search/BLAST_results/BLASTN_queries_P2-P4_vs_",genome,".out"), col_names = c("QueryId","SubjectId", "Identity(%)", "Length", "Mismatches", "Gap_opens", "Q_Start", "Q_End", "S_Start", "S_End", "Evalue", "BitScore"))%>%
mutate(Genome = genome) %>%
mutate(Strand = "+") %>%
mutate(Var = 0) %>%
mutate(S_Center =  S_Start+(S_End-S_Start)/2) %>%
filter(Evalue < 10^-3)
# Load gene annotation data
files <- list.files(str_c("TPP_aptamer_search/genomes/",genome,"/"), all.files = TRUE)
file <- str_subset(files, "\\.gff3")
genes <- read_tsv(str_c("TPP_aptamer_search/genomes/",genome,"/",file), col_names = c("seqid", "source", "type", "start", "end", "score", "strand", "phase", "attributes")) %>%
filter(type == "gene") %>%
mutate(seqid = str_replace(seqid, pattern = "\\.", "_"))
r
# loop over all blast results
for (i in 1:nrow(BLASTN)){
# loop over all annotated genes
for (j in 1:nrow(genes)){
# if seqid matches
if (BLASTN$SubjectId[i] == genes$seqid[j]){
# if hit is overlapping with gene region
if (BLASTN$S_Center[i] >= genes$start[j] & BLASTN$S_Center[i] <= genes$end[j]){
BLASTN$Gene[i] <- gene$attributes[j]
}
}
}
}
# Load BLAST data
BLASTN <- read_tsv(str_c("TPP_aptamer_search/BLAST_results/BLASTN_queries_P2-P4_vs_",genome,".out"), col_names = c("QueryId","SubjectId", "Identity(%)", "Length", "Mismatches", "Gap_opens", "Q_Start", "Q_End", "S_Start", "S_End", "Evalue", "BitScore"))%>%
mutate(Genome = genome) %>%
mutate(Strand = "+") %>%
mutate(Var = 0) %>%
mutate(Gene = "") %>%
mutate(S_Center =  S_Start+(S_End-S_Start)/2) %>%
filter(Evalue < 10^-3)
# Load gene annotation data
files <- list.files(str_c("TPP_aptamer_search/genomes/",genome,"/"), all.files = TRUE)
file <- str_subset(files, "\\.gff3")
genes <- read_tsv(str_c("TPP_aptamer_search/genomes/",genome,"/",file), col_names = c("seqid", "source", "type", "start", "end", "score", "strand", "phase", "attributes")) %>%
filter(type == "gene") %>%
mutate(seqid = str_replace(seqid, pattern = "\\.", "_"))
# loop over all blast results
for (i in 1:nrow(BLASTN)){
# loop over all annotated genes
for (j in 1:nrow(genes)){
# if seqid matches
if (BLASTN$SubjectId[i] == genes$seqid[j]){
# if hit is overlapping with gene region
if (BLASTN$S_Center[i] >= genes$start[j] & BLASTN$S_Center[i] <= genes$end[j]){
BLASTN$Gene[i] <- gene$attributes[j]
}
}
}
}
# loop over all blast results
for (i in 1:nrow(BLASTN)){
# loop over all annotated genes
for (j in 1:nrow(genes)){
# if seqid matches
if (BLASTN$SubjectId[i] == genes$seqid[j]){
# if hit is overlapping with gene region
if (BLASTN$S_Center[i] >= genes$start[j] & BLASTN$S_Center[i] <= genes$end[j]){
BLASTN$Gene[i] <- genes$attributes[j]
}
}
}
}
# loop over all genomes
for (genome in genomes) {
# Load BLAST data
BLASTN <- read_tsv(str_c("TPP_aptamer_search/BLAST_results/BLASTN_queries_P2-P4_vs_",genome,".out"), col_names = c("QueryId","SubjectId", "Identity(%)", "Length", "Mismatches", "Gap_opens", "Q_Start", "Q_End", "S_Start", "S_End", "Evalue", "BitScore"))%>%
mutate(Genome = genome) %>%
mutate(Strand = "+") %>%
mutate(Var = 0) %>%
mutate(Gene = "") %>%
mutate(S_Center =  S_Start+(S_End-S_Start)/2) %>%
filter(Evalue < 10^-3)
# Load gene annotation data
files <- list.files(str_c("TPP_aptamer_search/genomes/",genome,"/"), all.files = TRUE)
file <- str_subset(files, "\\.gff3")
genes <- read_tsv(str_c("TPP_aptamer_search/genomes/",genome,"/",file), col_names = c("seqid", "source", "type", "start", "end", "score", "strand", "phase", "attributes")) %>%
filter(type == "gene") %>%
mutate(seqid = str_replace(seqid, pattern = "\\.", "_"))
# loop over all blast results
for (i in 1:nrow(BLASTN)){
# loop over all annotated genes
for (j in 1:nrow(genes)){
# if seqid matches
if (BLASTN$SubjectId[i] == genes$seqid[j]){
# if hit is overlapping with gene region
if (BLASTN$S_Center[i] >= genes$start[j] & BLASTN$S_Center[i] <= genes$end[j]){
BLASTN$Gene[i] <- genes$attributes[j]
}
}
}
}
all_BLAST <- rbind(all_BLAST, BLASTN)
# convert format to .bed standard and filter for hits with Evalue < 10^-10
#mutate(Strand = ifelse(S_End < S_Start,"-","+")) %>%
#mutate(Var = ifelse(Strand == "-",S_Start,0)) %>%
#mutate(S_Start = ifelse(Strand == "-",S_End,S_Start)) %>%
#mutate(S_End = ifelse(Strand == "-",Var,S_End)) %>%
#mutate(S_Start = S_Start-1) #%>%
#select(SubjectId, S_Start, S_End, Name, Evalue, Strand) %>%
#arrange(SubjectId, S_Start)
## save data in .bed file format
#write_tsv(BLASTN, file.path(str_c(outfolder,"GullivR/",genome,"_",search,".bed")), col_names = FALSE)
#write_tsv(filter(BLASTN, Evalue < 10^-10), file.path(str_c(outfolder,"GullivR/",genome,"_",search,"_selected.bed")), col_names = FALSE)
}
View(genes)
genes
length(genes) == 0
length(genes) == 1
length(genes)
nrow(genes)
genomes=c("Cyclotella_cryptica_Cyccr1","Fistulifera_solaris_Fsol_1.0","Fragilariopsis_cylindrus_Fracy1","Phaeodactylum_tricornutum_ASM15095v2","Pseudo-nitzschia_multiseries_Psemu1","Pseudo-nitzschia_multistriata_ASM90066040v1","Seminavis_robusta_version1.2", "Synedra_acus_sac1", "Thalassiosira_oceanica_ThaOc_1.0", "Thalassiosira_pseudonana_ASM14940v2")
# initilise dataframe
all_BLAST <- data_frame()
# loop over all genomes
for (genome in genomes) {
# Load BLAST data
BLASTN <- read_tsv(str_c("TPP_aptamer_search/BLAST_results/BLASTN_queries_P2-P4_vs_",genome,".out"), col_names = c("QueryId","SubjectId", "Identity(%)", "Length", "Mismatches", "Gap_opens", "Q_Start", "Q_End", "S_Start", "S_End", "Evalue", "BitScore"))%>%
mutate(Genome = genome) %>%
mutate(Strand = "+") %>%
mutate(Var = 0) %>%
mutate(Gene = "") %>%
mutate(S_Center =  S_Start+(S_End-S_Start)/2) %>%
filter(Evalue < 10^-3)
# Load gene annotation data
files <- list.files(str_c("TPP_aptamer_search/genomes/",genome,"/"), all.files = TRUE)
file <- str_subset(files, "\\.gff3")
genes <- read_tsv(str_c("TPP_aptamer_search/genomes/",genome,"/",file), col_names = c("seqid", "source", "type", "start", "end", "score", "strand", "phase", "attributes")) %>%
filter(type == "gene") %>%
mutate(seqid = str_replace(seqid, pattern = "\\.", "_"))
# if annoated genes exist
if (nrow(genes) != 0){
# loop over all blast results
for (i in 1:nrow(BLASTN)){
# loop over all annotated genes
for (j in 1:nrow(genes)){
# if seqid matches
if (BLASTN$SubjectId[i] == genes$seqid[j]){
# if hit is overlapping with gene region
if (BLASTN$S_Center[i] >= genes$start[j] & BLASTN$S_Center[i] <= genes$end[j]){
BLASTN$Gene[i] <- genes$attributes[j]
}
}
}
}
}
all_BLAST <- rbind(all_BLAST, BLASTN)
# convert format to .bed standard and filter for hits with Evalue < 10^-10
#mutate(Strand = ifelse(S_End < S_Start,"-","+")) %>%
#mutate(Var = ifelse(Strand == "-",S_Start,0)) %>%
#mutate(S_Start = ifelse(Strand == "-",S_End,S_Start)) %>%
#mutate(S_End = ifelse(Strand == "-",Var,S_End)) %>%
#mutate(S_Start = S_Start-1) #%>%
#select(SubjectId, S_Start, S_End, Name, Evalue, Strand) %>%
#arrange(SubjectId, S_Start)
## save data in .bed file format
#write_tsv(BLASTN, file.path(str_c(outfolder,"GullivR/",genome,"_",search,".bed")), col_names = FALSE)
#write_tsv(filter(BLASTN, Evalue < 10^-10), file.path(str_c(outfolder,"GullivR/",genome,"_",search,"_selected.bed")), col_names = FALSE)
}
# if annoated genes exist and BLAST hits exists
if (nrow(genes) != 0 & nrow(BLASTN) != 0 ){
# loop over all blast results
for (i in 1:nrow(BLASTN)){
# loop over all annotated genes
for (j in 1:nrow(genes)){
# if seqid matches
if (BLASTN$SubjectId[i] == genes$seqid[j]){
# if hit is overlapping with gene region
if (BLASTN$S_Center[i] >= genes$start[j] & BLASTN$S_Center[i] <= genes$end[j]){
BLASTN$Gene[i] <- genes$attributes[j]
}
}
}
}
}
# initilise dataframe
all_BLAST <- data_frame()
# loop over all genomes
for (genome in genomes) {
# Load BLAST data
BLASTN <- read_tsv(str_c("TPP_aptamer_search/BLAST_results/BLASTN_queries_P2-P4_vs_",genome,".out"), col_names = c("QueryId","SubjectId", "Identity(%)", "Length", "Mismatches", "Gap_opens", "Q_Start", "Q_End", "S_Start", "S_End", "Evalue", "BitScore"))%>%
mutate(Genome = genome) %>%
mutate(Strand = "+") %>%
mutate(Var = 0) %>%
mutate(Gene = "") %>%
mutate(S_Center =  S_Start+(S_End-S_Start)/2) %>%
filter(Evalue < 10^-3)
# Load gene annotation data
files <- list.files(str_c("TPP_aptamer_search/genomes/",genome,"/"), all.files = TRUE)
file <- str_subset(files, "\\.gff3")
genes <- read_tsv(str_c("TPP_aptamer_search/genomes/",genome,"/",file), col_names = c("seqid", "source", "type", "start", "end", "score", "strand", "phase", "attributes")) %>%
filter(type == "gene") %>%
mutate(seqid = str_replace(seqid, pattern = "\\.", "_"))
# if annoated genes exist and BLAST hits exists
if (nrow(genes) != 0 & nrow(BLASTN) != 0 ){
# loop over all blast results
for (i in 1:nrow(BLASTN)){
# loop over all annotated genes
for (j in 1:nrow(genes)){
# if seqid matches
if (BLASTN$SubjectId[i] == genes$seqid[j]){
# if hit is overlapping with gene region
if (BLASTN$S_Center[i] >= genes$start[j] & BLASTN$S_Center[i] <= genes$end[j]){
BLASTN$Gene[i] <- genes$attributes[j]
}
}
}
}
}
all_BLAST <- rbind(all_BLAST, BLASTN)
# convert format to .bed standard and filter for hits with Evalue < 10^-10
#mutate(Strand = ifelse(S_End < S_Start,"-","+")) %>%
#mutate(Var = ifelse(Strand == "-",S_Start,0)) %>%
#mutate(S_Start = ifelse(Strand == "-",S_End,S_Start)) %>%
#mutate(S_End = ifelse(Strand == "-",Var,S_End)) %>%
#mutate(S_Start = S_Start-1) #%>%
#select(SubjectId, S_Start, S_End, Name, Evalue, Strand) %>%
#arrange(SubjectId, S_Start)
## save data in .bed file format
#write_tsv(BLASTN, file.path(str_c(outfolder,"GullivR/",genome,"_",search,".bed")), col_names = FALSE)
#write_tsv(filter(BLASTN, Evalue < 10^-10), file.path(str_c(outfolder,"GullivR/",genome,"_",search,"_selected.bed")), col_names = FALSE)
}
View(all_BLAST)
View(all_BLAST)
all_BLAST <- all_BLAST %>%
arrange(Subjectid, S_Start, E-value)
all_BLAST <- all_BLAST %>%
arrange(Subjectid, S_Start, E-value)
all_BLAST <- all_BLAST %>%
arrange("Subjectid", "S_Start", "E-value")
write_tsv(all_BLAST, "BLAST_results")
